<!DOCTYPE html>
<!--
  포커 핸드 모니터링 시스템 - 프로페셔널 에디션
  Version: 7.0.0
  Last Updated: 2025-01-02 19:00 KST
  Description: 후반 편집용 상세 핸드 분석 및 모니터링 통합 시스템
-->
<html lang="ko">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>포커 핸드 모니터링 v7.0.0</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&family=JetBrains+Mono:wght@400;600&display=swap');
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body { 
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
      color: #e2e8f0;
      min-height: 100vh;
    }
    
    .mono {
      font-family: 'JetBrains Mono', monospace;
    }
    
    /* 포커 테이블 비주얼 */
    .poker-table {
      background: radial-gradient(ellipse at center, #065f46 0%, #064e3b 50%, #022c22 100%);
      border: 8px solid #713f12;
      box-shadow: inset 0 0 40px rgba(0,0,0,0.5), 0 10px 40px rgba(0,0,0,0.3);
      position: relative;
      border-radius: 150px;
      padding: 40px;
      min-height: 400px;
    }
    
    /* 카드 스타일 */
    .playing-card {
      display: inline-flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 84px;
      background: white;
      border: 1px solid #374151;
      border-radius: 8px;
      font-weight: 800;
      font-size: 24px;
      margin: 0 3px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      position: relative;
      transition: all 0.2s;
    }
    
    .playing-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 20px rgba(0,0,0,0.4);
    }
    
    .playing-card.spade::after { content: '♠'; }
    .playing-card.heart::after { content: '♥'; }
    .playing-card.diamond::after { content: '♦'; }
    .playing-card.club::after { content: '♣'; }
    
    .playing-card::after {
      position: absolute;
      bottom: 4px;
      right: 4px;
      font-size: 16px;
      opacity: 0.8;
    }
    
    .playing-card.spade, .playing-card.club { color: #000; }
    .playing-card.heart, .playing-card.diamond { color: #dc2626; }
    
    .playing-card.back {
      background: repeating-linear-gradient(
        45deg,
        #1e40af,
        #1e40af 4px,
        #2563eb 4px,
        #2563eb 8px
      );
      color: transparent;
    }
    
    .playing-card.highlight {
      box-shadow: 0 0 30px rgba(251, 191, 36, 0.8);
      border: 2px solid #fbbf24;
    }
    
    /* 칩 스택 비주얼 */
    .chip-stack {
      display: flex;
      align-items: center;
      gap: 4px;
      padding: 6px 12px;
      background: linear-gradient(135deg, #111827 0%, #1f2937 100%);
      border: 1px solid #374151;
      border-radius: 20px;
      font-weight: 600;
      font-size: 14px;
    }
    
    .chip-icon {
      width: 20px;
      height: 20px;
      background: radial-gradient(circle, #fbbf24 0%, #f59e0b 100%);
      border-radius: 50%;
      border: 2px solid #92400e;
      box-shadow: inset 0 1px 2px rgba(0,0,0,0.3);
    }
    
    /* 포지션 배지 */
    .position-badge {
      display: inline-flex;
      align-items: center;
      padding: 4px 10px;
      border-radius: 6px;
      font-size: 11px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 1px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .position-badge.dealer {
      background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
      color: #000;
    }
    
    .position-badge.sb {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
    }
    
    .position-badge.bb {
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      color: white;
    }
    
    .position-badge.utg {
      background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
      color: white;
    }
    
    .position-badge.mp {
      background: linear-gradient(135deg, #ec4899 0%, #db2777 100%);
      color: white;
    }
    
    .position-badge.co {
      background: linear-gradient(135deg, #f97316 0%, #ea580c 100%);
      color: white;
    }
    
    /* 액션 타임라인 */
    .action-timeline {
      position: relative;
      padding-left: 40px;
    }
    
    .action-timeline::before {
      content: '';
      position: absolute;
      left: 15px;
      top: 0;
      bottom: 0;
      width: 2px;
      background: linear-gradient(180deg, #3b82f6 0%, #8b5cf6 100%);
    }
    
    .action-item {
      position: relative;
      padding: 12px 16px;
      margin-bottom: 16px;
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid #334155;
      border-radius: 8px;
      backdrop-filter: blur(10px);
    }
    
    .action-item::before {
      content: '';
      position: absolute;
      left: -30px;
      top: 50%;
      transform: translateY(-50%);
      width: 12px;
      height: 12px;
      background: #3b82f6;
      border: 3px solid #1e293b;
      border-radius: 50%;
    }
    
    .action-item.winner::before {
      background: #10b981;
      box-shadow: 0 0 20px rgba(16, 185, 129, 0.6);
    }
    
    /* 액션 버튼 스타일 */
    .action-button {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 6px 14px;
      border-radius: 8px;
      font-size: 13px;
      font-weight: 600;
      text-transform: uppercase;
      transition: all 0.2s;
      border: 1px solid transparent;
    }
    
    .action-button.fold {
      background: rgba(100, 116, 139, 0.2);
      color: #94a3b8;
      border-color: #475569;
    }
    
    .action-button.check {
      background: rgba(14, 165, 233, 0.2);
      color: #38bdf8;
      border-color: #0284c7;
    }
    
    .action-button.call {
      background: rgba(34, 197, 94, 0.2);
      color: #4ade80;
      border-color: #16a34a;
    }
    
    .action-button.bet {
      background: rgba(251, 146, 60, 0.2);
      color: #fb923c;
      border-color: #ea580c;
    }
    
    .action-button.raise {
      background: rgba(239, 68, 68, 0.2);
      color: #f87171;
      border-color: #dc2626;
    }
    
    .action-button.allin {
      background: linear-gradient(135deg, rgba(251, 191, 36, 0.3) 0%, rgba(245, 158, 11, 0.3) 100%);
      color: #fbbf24;
      border-color: #f59e0b;
      font-weight: 700;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.7; }
    }
    
    /* 플레이어 시트 */
    .player-seat {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(15, 23, 42, 0.9) 100%);
      border: 2px solid #334155;
      border-radius: 12px;
      padding: 16px;
      backdrop-filter: blur(10px);
      transition: all 0.3s;
    }
    
    .player-seat:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(0,0,0,0.3);
      border-color: #3b82f6;
    }
    
    .player-seat.active {
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(99, 102, 241, 0.2) 100%);
      border-color: #3b82f6;
    }
    
    .player-seat.winner {
      background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(5, 150, 105, 0.2) 100%);
      border-color: #10b981;
    }
    
    .player-seat.folded {
      opacity: 0.5;
    }
    
    /* 팟 디스플레이 */
    .pot-display {
      background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
      border: 2px solid #fbbf24;
      border-radius: 12px;
      padding: 20px;
      text-align: center;
      box-shadow: 0 0 30px rgba(251, 191, 36, 0.2);
    }
    
    .pot-amount {
      font-size: 32px;
      font-weight: 800;
      color: #fbbf24;
      text-shadow: 0 2px 8px rgba(251, 191, 36, 0.4);
    }
    
    /* 스트리트 인디케이터 */
    .street-indicator {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: linear-gradient(90deg, rgba(30, 41, 59, 0.8) 0%, rgba(15, 23, 42, 0.8) 100%);
      border: 1px solid #334155;
      border-radius: 8px;
      padding: 12px;
      margin-bottom: 20px;
    }
    
    .street-step {
      flex: 1;
      text-align: center;
      padding: 8px;
      border-radius: 6px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
      transition: all 0.3s;
    }
    
    .street-step.completed {
      background: rgba(16, 185, 129, 0.2);
      color: #10b981;
      border: 1px solid #059669;
    }
    
    .street-step.active {
      background: rgba(59, 130, 246, 0.3);
      color: #60a5fa;
      border: 1px solid #3b82f6;
      animation: pulse 2s infinite;
    }
    
    /* 스크롤바 커스텀 */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: #1e293b;
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: #475569;
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: #64748b;
    }
    
    /* 그리드 레이아웃 */
    .main-grid {
      display: grid;
      grid-template-columns: 320px 1fr 360px;
      gap: 20px;
      padding: 20px;
      max-width: 1920px;
      margin: 0 auto;
    }
    
    @media (max-width: 1440px) {
      .main-grid {
        grid-template-columns: 280px 1fr 320px;
      }
    }
    
    @media (max-width: 1024px) {
      .main-grid {
        grid-template-columns: 1fr;
      }
    }
    
    /* 헤더 스타일 */
    .app-header {
      background: linear-gradient(90deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 41, 59, 0.95) 100%);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid #334155;
      padding: 16px 24px;
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    /* 통계 카드 */
    .stat-card {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.6) 0%, rgba(15, 23, 42, 0.6) 100%);
      border: 1px solid #334155;
      border-radius: 8px;
      padding: 12px;
      backdrop-filter: blur(10px);
    }
    
    .stat-label {
      font-size: 11px;
      color: #94a3b8;
      text-transform: uppercase;
      letter-spacing: 1px;
      margin-bottom: 4px;
    }
    
    .stat-value {
      font-size: 24px;
      font-weight: 700;
      color: #f1f5f9;
    }
    
    /* 로딩 애니메이션 */
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #1e293b;
      border-top-color: #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <!-- 헤더 -->
  <header class="app-header">
    <div class="flex items-center justify-between">
      <div class="flex items-center gap-4">
        <h1 class="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
          포커 핸드 모니터링 시스템
        </h1>
        <span class="px-3 py-1 bg-green-500/20 text-green-400 rounded-full text-xs font-semibold">
          v7.0.0
        </span>
      </div>
      <div class="flex items-center gap-3">
        <div id="connection-status" class="flex items-center gap-2 px-3 py-1 bg-gray-800 rounded-lg">
          <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span class="text-xs text-gray-400">연결됨</span>
        </div>
        <button id="settings-btn" class="p-2 hover:bg-gray-800 rounded-lg transition">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
        </button>
      </div>
    </div>
  </header>

  <!-- 메인 그리드 -->
  <div class="main-grid">
    <!-- 왼쪽: 핸드 리스트 -->
    <aside class="space-y-4">
      <div class="bg-gray-800/50 backdrop-blur rounded-lg p-4">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-lg font-semibold">핸드 목록</h2>
          <button id="refresh-btn" class="p-2 hover:bg-gray-700 rounded transition">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
          </button>
        </div>
        
        <!-- 필터 -->
        <div class="space-y-2 mb-4">
          <select id="table-filter" class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-sm">
            <option value="">모든 테이블</option>
          </select>
          <select id="status-filter" class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-sm">
            <option value="">모든 상태</option>
            <option value="pending">대기중</option>
            <option value="editing">편집중</option>
            <option value="completed">완료</option>
          </select>
        </div>
        
        <!-- 핸드 리스트 -->
        <div id="hand-list" class="space-y-2 max-h-[calc(100vh-280px)] overflow-y-auto">
          <!-- 동적으로 로드됨 -->
        </div>
      </div>
      
      <!-- 통계 -->
      <div class="grid grid-cols-2 gap-2">
        <div class="stat-card">
          <div class="stat-label">총 핸드</div>
          <div class="stat-value" id="total-hands">0</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">완료</div>
          <div class="stat-value" id="completed-hands">0</div>
        </div>
      </div>
    </aside>

    <!-- 중앙: 핸드 상세 정보 -->
    <main class="space-y-4">
      <!-- 핸드 헤더 정보 -->
      <div class="bg-gray-800/50 backdrop-blur rounded-lg p-6">
        <div class="flex items-start justify-between mb-4">
          <div>
            <h2 class="text-2xl font-bold mb-2">
              Hand #<span id="hand-number">-</span>
            </h2>
            <div class="flex items-center gap-4 text-sm text-gray-400">
              <span>Table: <span id="table-name" class="text-white font-semibold">-</span></span>
              <span>Blinds: <span id="blinds" class="text-white font-semibold">-</span></span>
              <span>Players: <span id="player-count" class="text-white font-semibold">-</span></span>
            </div>
          </div>
          <div class="flex gap-2">
            <button id="edit-btn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold transition">
              편집
            </button>
            <button id="complete-btn" class="px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg font-semibold transition">
              완료
            </button>
          </div>
        </div>
        
        <!-- 스트리트 인디케이터 -->
        <div class="street-indicator">
          <div class="street-step" data-street="preflop">Preflop</div>
          <div class="street-step" data-street="flop">Flop</div>
          <div class="street-step" data-street="turn">Turn</div>
          <div class="street-step" data-street="river">River</div>
          <div class="street-step" data-street="showdown">Showdown</div>
        </div>
      </div>

      <!-- 포커 테이블 뷰 -->
      <div class="bg-gray-800/50 backdrop-blur rounded-lg p-6">
        <div class="poker-table">
          <!-- 팟 정보 -->
          <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
            <div class="pot-display">
              <div class="text-sm text-gray-400 mb-2">Total Pot</div>
              <div class="pot-amount" id="pot-amount">0</div>
            </div>
          </div>
          
          <!-- 커뮤니티 카드 -->
          <div class="absolute top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
            <div class="flex gap-2" id="community-cards">
              <!-- 동적으로 로드됨 -->
            </div>
          </div>
          
          <!-- 플레이어 시트 (원형 배치) -->
          <div id="player-seats">
            <!-- 동적으로 로드됨 -->
          </div>
        </div>
      </div>

      <!-- 액션 히스토리 -->
      <div class="bg-gray-800/50 backdrop-blur rounded-lg p-6">
        <h3 class="text-lg font-semibold mb-4">액션 히스토리</h3>
        <div class="action-timeline" id="action-timeline">
          <!-- 동적으로 로드됨 -->
        </div>
      </div>
    </main>

    <!-- 오른쪽: 플레이어 상세 & 노트 -->
    <aside class="space-y-4">
      <!-- 선택된 플레이어 정보 -->
      <div class="bg-gray-800/50 backdrop-blur rounded-lg p-4">
        <h3 class="text-lg font-semibold mb-4">플레이어 정보</h3>
        <div id="selected-player-info" class="space-y-3">
          <div class="text-center text-gray-500 py-8">
            플레이어를 선택하세요
          </div>
        </div>
      </div>
      
      <!-- 핸드 결과 -->
      <div class="bg-gray-800/50 backdrop-blur rounded-lg p-4">
        <h3 class="text-lg font-semibold mb-4">핸드 결과</h3>
        <div id="hand-result" class="space-y-2">
          <!-- 동적으로 로드됨 -->
        </div>
      </div>
      
      <!-- 편집 노트 -->
      <div class="bg-gray-800/50 backdrop-blur rounded-lg p-4">
        <h3 class="text-lg font-semibold mb-4">편집 노트</h3>
        <textarea 
          id="edit-notes"
          class="w-full h-32 px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-sm resize-none"
          placeholder="핸드에 대한 메모를 작성하세요..."
        ></textarea>
        <button class="mt-2 w-full px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-sm font-semibold transition">
          노트 저장
        </button>
      </div>
    </aside>
  </div>

  <!-- 설정 모달 -->
  <div id="settings-modal" class="hidden fixed inset-0 bg-black/50 backdrop-blur z-50 flex items-center justify-center">
    <div class="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
      <h3 class="text-xl font-bold mb-4">설정</h3>
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium mb-2">새로고침 간격</label>
          <select id="refresh-interval" class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg">
            <option value="5000">5초</option>
            <option value="10000" selected>10초</option>
            <option value="30000">30초</option>
            <option value="60000">1분</option>
          </select>
        </div>
        <div class="flex items-center gap-3">
          <input type="checkbox" id="enable-notifications" class="w-4 h-4" checked>
          <label for="enable-notifications" class="text-sm">새 핸드 알림 활성화</label>
        </div>
        <div class="flex items-center gap-3">
          <input type="checkbox" id="enable-sound" class="w-4 h-4" checked>
          <label for="enable-sound" class="text-sm">소리 알림 활성화</label>
        </div>
        <div class="flex justify-end gap-2 mt-6">
          <button id="cancel-settings" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg font-semibold transition">
            취소
          </button>
          <button id="save-settings" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold transition">
            저장
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ====================================
    // 포커 핸드 모니터링 시스템 v7.0.0
    // ====================================
    
    const CONFIG = {
      // Google Sheets CSV URLs
      CSV_HAND_URL: 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSDY_i4330JANAjIz4sMncdJdRHsOkfUCjQusHTGQk2tykrhA4d09LeIp3XRbLd8hkN6SgSB47k_nux/pub?gid=1906746276&single=true&output=csv',
      CSV_INDEX_URL: 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSDY_i4330JANAjIz4sMncdJdRHsOkfUCjQusHTGQk2tykrhA4d09LeIp3XRbLd8hkN6SgSB47k_nux/pub?gid=1354012271&single=true&output=csv',
      APPS_SCRIPT_URL: 'https://script.google.com/macros/s/AKfycbzITq1b6hOPfAAzVlnjEZsxzbHImJ8ifs-nblfeqmYhn3tMsXsmkQx0OUwyFYRsUE73/exec',
      
      // 설정
      REFRESH_INTERVAL: 10000,
      ENABLE_NOTIFICATIONS: true,
      ENABLE_SOUND: true
    };
    
    // 전역 상태
    let currentHand = null;
    let allHands = [];
    let handData = {};
    let refreshTimer = null;
    let lastHandCount = 0;
    
    // ====================================
    // 유틸리티 함수
    // ====================================
    
    function parseCSV(text) {
      const lines = text.trim().split('\n');
      const rows = [];
      
      // CSV 파싱 (헤더 없음, 위치 기반)
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const row = [];
        let inQuotes = false;
        let currentField = '';
        
        for (let j = 0; j < line.length; j++) {
          const char = line[j];
          if (char === '"') {
            inQuotes = !inQuotes;
          } else if (char === ',' && !inQuotes) {
            row.push(currentField.trim());
            currentField = '';
          } else {
            currentField += char;
          }
        }
        row.push(currentField.trim());
        rows.push(row);
      }
      
      return rows;
    }
    
    function formatNumber(num) {
      return new Intl.NumberFormat('ko-KR').format(num);
    }
    
    function getPositionBadge(position) {
      const badges = {
        'BTN': 'dealer',
        'SB': 'sb',
        'BB': 'bb',
        'UTG': 'utg',
        'MP': 'mp',
        'CO': 'co'
      };
      return badges[position] || 'default';
    }
    
    function getSuitSymbol(suit) {
      const symbols = {
        's': '♠',
        'h': '♥',
        'd': '♦',
        'c': '♣'
      };
      return symbols[suit.toLowerCase()] || '';
    }
    
    function getSuitClass(suit) {
      const classes = {
        's': 'spade',
        'h': 'heart',
        'd': 'diamond',
        'c': 'club'
      };
      return classes[suit.toLowerCase()] || '';
    }
    
    function createCardElement(card, size = 'normal') {
      if (!card || card === '?' || card.length < 2) {
        return `<div class="playing-card back ${size === 'mini' ? 'card-mini' : ''}"></div>`;
      }
      
      const rank = card.slice(0, -1);
      const suit = card.slice(-1);
      const suitClass = getSuitClass(suit);
      
      return `
        <div class="playing-card ${suitClass} ${size === 'mini' ? 'card-mini' : ''}">
          <div>${rank}</div>
        </div>
      `;
    }
    
    // ====================================
    // 데이터 로드 함수
    // ====================================
    
    async function loadIndexData() {
      try {
        const response = await fetch(CONFIG.CSV_INDEX_URL + '&t=' + Date.now());
        const text = await response.text();
        const rows = parseCSV(text);
        
        // 첫 번째 행은 헤더이므로 제외
        const dataRows = rows.slice(1);
        
        allHands = dataRows.map(row => ({
          handNumber: row[0],  // A열: handNumber
          startRow: parseInt(row[1]),  // B열: startRow
          endRow: parseInt(row[2]),  // C열: endRow
          handUpdatedAt: row[3],  // D열: handUpdatedAt
          handEdit: row[4] === 'TRUE',  // E열: handEdit
          handEditTime: row[5],  // F열: handEditTime
          table: row[7],  // H열: table
          lastStreet: row[14],  // O열: lastStreet
          lastAction: row[15],  // P열: lastAction
          workStatus: row[16] || '대기중'  // Q열: workStatus
        }));
        
        // 최신 핸드를 위로
        allHands.reverse();
        
        // 새 핸드 확인
        if (lastHandCount > 0 && allHands.length > lastHandCount) {
          const newCount = allHands.length - lastHandCount;
          showNotification(`${newCount}개의 새로운 핸드가 추가되었습니다!`);
          playSound();
        }
        lastHandCount = allHands.length;
        
        updateHandList();
        updateStats();
        
      } catch (error) {
        console.error('Index 데이터 로드 실패:', error);
      }
    }
    
    async function loadHandData(handNumber) {
      try {
        const response = await fetch(CONFIG.CSV_HAND_URL + '&t=' + Date.now());
        const text = await response.text();
        const rows = parseCSV(text);
        
        // 해당 핸드의 데이터 찾기
        const hand = allHands.find(h => h.handNumber === handNumber);
        if (!hand) return null;
        
        const handRows = rows.slice(hand.startRow - 1, hand.endRow);
        return parseHandDetails(handRows);
        
      } catch (error) {
        console.error('Hand 데이터 로드 실패:', error);
        return null;
      }
    }
    
    function parseHandDetails(rows) {
      const hand = {
        number: '',
        table: '',
        blinds: { sb: 0, bb: 0 },
        players: [],
        actions: [],
        communityCards: [],
        pot: 0,
        winner: null,
        streets: {
          preflop: [],
          flop: [],
          turn: [],
          river: [],
          showdown: []
        }
      };
      
      let currentStreet = 'preflop';
      
      for (const row of rows) {
        const rowType = row[1];  // 두 번째 열이 레코드 타입
        
        switch (rowType) {
          case 'HAND':
            hand.number = row[2];  // 세 번째 열이 핸드 번호
            hand.timestamp = row[3];
            // 블라인드 정보가 HAND 행에 있을 수 있음
            if (row[11] && row[12]) {
              hand.blinds.sb = parseInt(row[11]) || 0;
              hand.blinds.bb = parseInt(row[12]) || 0;
            }
            hand.table = row[16] || '';  // 테이블 정보
            break;
            
          case 'PLAYER':
            const playerName = row[2];
            const seat = parseInt(row[3]) || 0;
            const chips = parseInt(row[5]) || parseInt(row[6]) || 0;
            const cards = row[7] ? row[7].split(' ') : ['?', '?'];
            
            const player = {
              seat: seat,
              name: playerName,
              chips: chips,
              cards: cards.length >= 2 ? cards : [cards[0] || '?', cards[1] || '?'],
              position: '',
              status: 'active'
            };
            hand.players.push(player);
            break;
            
          case 'EVENT':
            const eventType = row[2];
            
            // BOARD 이벤트 처리
            if (eventType === 'BOARD') {
              const boardNum = parseInt(row[3]) || 0;
              const card = row[4];
              
              if (boardNum === 1) {
                currentStreet = 'flop';
                hand.communityCards = [card];
              } else if (boardNum === 2) {
                hand.communityCards.push(card);
              } else if (boardNum === 3) {
                hand.communityCards.push(card);
              } else if (boardNum === 4) {
                currentStreet = 'turn';
                hand.communityCards.push(card);
              } else if (boardNum === 5) {
                currentStreet = 'river';
                hand.communityCards.push(card);
              }
            } else {
              // 일반 액션 이벤트
              const playerNum = row[3];
              const amount = parseInt(row[4]) || 0;
              
              // 플레이어 번호를 이름으로 매핑
              const playerObj = hand.players.find(p => p.seat === parseInt(playerNum));
              const playerName = playerObj ? playerObj.name : `Player ${playerNum}`;
              
              const action = {
                player: playerName,
                action: eventType,
                amount: amount,
                street: currentStreet
              };
              
              hand.actions.push(action);
              hand.streets[currentStreet].push(action);
              
              // 팟 계산
              if (eventType === 'BET' || eventType === 'CALL' || eventType === 'RAISE') {
                hand.pot += amount;
              }
              
              // 폴드 처리
              if (eventType === 'FOLD') {
                if (playerObj) playerObj.status = 'folded';
              }
            }
            break;
            
          case 'WIN':
            const winnerNum = row[2];
            const winAmount = parseInt(row[3]) || 0;
            const winnerObj = hand.players.find(p => p.seat === parseInt(winnerNum));
            
            hand.winner = {
              player: winnerObj ? winnerObj.name : `Player ${winnerNum}`,
              amount: winAmount,
              hand: row[4] || ''
            };
            break;
            
          case 'POT':
            // POT 정보가 있으면 처리
            hand.pot = parseInt(row[2]) || hand.pot;
            break;
        }
      }
      
      // 포지션 계산
      calculatePositions(hand);
      
      return hand;
    }
    
    function calculatePositions(hand) {
      const playerCount = hand.players.length;
      if (playerCount < 2) return;
      
      // 딜러 버튼 위치 찾기
      let dealerIndex = hand.players.findIndex(p => p.position === 'BTN');
      if (dealerIndex === -1) dealerIndex = 0;
      
      // 포지션 할당
      const positions = getPositionNames(playerCount);
      hand.players.forEach((player, index) => {
        const posIndex = (index - dealerIndex + playerCount) % playerCount;
        player.position = positions[posIndex];
      });
    }
    
    function getPositionNames(playerCount) {
      const positions = {
        2: ['BTN', 'BB'],
        3: ['BTN', 'SB', 'BB'],
        4: ['BTN', 'SB', 'BB', 'CO'],
        5: ['BTN', 'SB', 'BB', 'UTG', 'CO'],
        6: ['BTN', 'SB', 'BB', 'UTG', 'MP', 'CO'],
        7: ['BTN', 'SB', 'BB', 'UTG', 'UTG+1', 'MP', 'CO'],
        8: ['BTN', 'SB', 'BB', 'UTG', 'UTG+1', 'MP', 'MP+1', 'CO'],
        9: ['BTN', 'SB', 'BB', 'UTG', 'UTG+1', 'UTG+2', 'MP', 'MP+1', 'CO'],
        10: ['BTN', 'SB', 'BB', 'UTG', 'UTG+1', 'UTG+2', 'MP', 'MP+1', 'MP+2', 'CO']
      };
      
      return positions[playerCount] || Array(playerCount).fill('').map((_, i) => `Seat ${i + 1}`);
    }
    
    // ====================================
    // UI 업데이트 함수
    // ====================================
    
    function updateHandList() {
      const listEl = document.getElementById('hand-list');
      const tableFilter = document.getElementById('table-filter').value;
      const statusFilter = document.getElementById('status-filter').value;
      
      let filteredHands = allHands;
      
      if (tableFilter) {
        filteredHands = filteredHands.filter(h => h.table === tableFilter);
      }
      
      if (statusFilter) {
        filteredHands = filteredHands.filter(h => {
          if (statusFilter === 'completed') return h.handEdit;
          if (statusFilter === 'editing') return h.workStatus === '진행중';
          if (statusFilter === 'pending') return !h.handEdit && h.workStatus !== '진행중';
          return true;
        });
      }
      
      listEl.innerHTML = filteredHands.map(hand => `
        <div class="p-3 bg-gray-900 hover:bg-gray-800 rounded-lg cursor-pointer transition ${hand.handEdit ? 'border-l-4 border-green-500' : ''}"
             onclick="selectHand('${hand.handNumber}')">
          <div class="flex items-center justify-between mb-1">
            <span class="font-semibold">#${hand.handNumber}</span>
            ${hand.handEdit ? '<span class="text-green-400 text-xs">✓ 완료</span>' : ''}
          </div>
          <div class="text-xs text-gray-400">
            <div>${hand.table || '-'}</div>
            <div>${hand.lastStreet || 'Preflop'} - ${hand.lastAction || '-'}</div>
            <div>${hand.handUpdatedAt || '-'}</div>
          </div>
        </div>
      `).join('');
      
      // 테이블 필터 옵션 업데이트
      const tables = [...new Set(allHands.map(h => h.table).filter(t => t))];
      const tableFilterEl = document.getElementById('table-filter');
      const currentTable = tableFilterEl.value;
      
      tableFilterEl.innerHTML = '<option value="">모든 테이블</option>' +
        tables.map(table => `<option value="${table}" ${table === currentTable ? 'selected' : ''}>${table}</option>`).join('');
    }
    
    function updateStats() {
      document.getElementById('total-hands').textContent = allHands.length;
      document.getElementById('completed-hands').textContent = allHands.filter(h => h.handEdit).length;
    }
    
    async function selectHand(handNumber) {
      currentHand = handNumber;
      
      // 핸드 데이터 로드
      const hand = await loadHandData(handNumber);
      if (!hand) return;
      
      // 헤더 정보 업데이트
      document.getElementById('hand-number').textContent = hand.number;
      document.getElementById('table-name').textContent = hand.table || '-';
      document.getElementById('blinds').textContent = `${hand.blinds.sb}/${hand.blinds.bb}`;
      document.getElementById('player-count').textContent = hand.players.length;
      document.getElementById('pot-amount').textContent = formatNumber(hand.pot);
      
      // 스트리트 인디케이터 업데이트
      updateStreetIndicator(hand);
      
      // 커뮤니티 카드 표시
      updateCommunityCards(hand.communityCards);
      
      // 플레이어 시트 표시
      updatePlayerSeats(hand.players);
      
      // 액션 타임라인 표시
      updateActionTimeline(hand);
      
      // 핸드 결과 표시
      updateHandResult(hand);
    }
    
    function updateStreetIndicator(hand) {
      const streets = ['preflop', 'flop', 'turn', 'river', 'showdown'];
      let lastStreetIndex = 0;
      
      // 마지막 스트리트 찾기
      streets.forEach((street, index) => {
        if (hand.streets[street] && hand.streets[street].length > 0) {
          lastStreetIndex = index;
        }
      });
      
      // UI 업데이트
      document.querySelectorAll('.street-step').forEach((el, index) => {
        el.classList.remove('completed', 'active');
        if (index < lastStreetIndex) {
          el.classList.add('completed');
        } else if (index === lastStreetIndex) {
          el.classList.add('active');
        }
      });
    }
    
    function updateCommunityCards(cards) {
      const container = document.getElementById('community-cards');
      
      if (!cards || cards.length === 0) {
        container.innerHTML = '<div class="text-gray-500">커뮤니티 카드 없음</div>';
        return;
      }
      
      container.innerHTML = cards.map(card => createCardElement(card)).join('');
    }
    
    function updatePlayerSeats(players) {
      const container = document.getElementById('player-seats');
      
      // 원형 배치를 위한 각도 계산
      const angleStep = 360 / players.length;
      const radius = 140;
      const centerX = 250;
      const centerY = 160;
      
      container.innerHTML = players.map((player, index) => {
        const angle = (angleStep * index - 90) * Math.PI / 180;
        const x = centerX + radius * Math.cos(angle) - 80;
        const y = centerY + radius * Math.sin(angle) - 40;
        
        return `
          <div class="player-seat ${player.status === 'folded' ? 'folded' : ''} ${player.status === 'winner' ? 'winner' : ''}"
               style="position: absolute; left: ${x}px; top: ${y}px; width: 160px;"
               onclick="selectPlayer('${player.name}')">
            <div class="flex items-center justify-between mb-2">
              <span class="font-semibold">Seat ${player.seat}</span>
              <span class="position-badge ${getPositionBadge(player.position)}">${player.position}</span>
            </div>
            <div class="text-sm mb-2">${player.name}</div>
            <div class="flex gap-1 mb-2">
              ${player.cards.map(card => createCardElement(card, 'mini')).join('')}
            </div>
            <div class="chip-stack">
              <div class="chip-icon"></div>
              <span>${formatNumber(player.chips)}</span>
            </div>
          </div>
        `;
      }).join('');
    }
    
    function updateActionTimeline(hand) {
      const container = document.getElementById('action-timeline');
      const streets = ['preflop', 'flop', 'turn', 'river', 'showdown'];
      
      let html = '';
      
      streets.forEach(street => {
        if (hand.streets[street] && hand.streets[street].length > 0) {
          html += `
            <div class="mb-6">
              <h4 class="text-sm font-semibold text-gray-400 mb-3 uppercase">${street}</h4>
              ${hand.streets[street].map(action => `
                <div class="action-item ${action.player === hand.winner?.player ? 'winner' : ''}">
                  <div class="flex items-center justify-between">
                    <span class="font-semibold">${action.player}</span>
                    <div class="action-button ${action.action.toLowerCase().replace(' ', '')}">
                      ${action.action}
                      ${action.amount > 0 ? `<span>${formatNumber(action.amount)}</span>` : ''}
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          `;
        }
      });
      
      container.innerHTML = html || '<div class="text-center text-gray-500">액션 기록 없음</div>';
    }
    
    function updateHandResult(hand) {
      const container = document.getElementById('hand-result');
      
      if (!hand.winner) {
        container.innerHTML = '<div class="text-center text-gray-500">결과 없음</div>';
        return;
      }
      
      container.innerHTML = `
        <div class="p-4 bg-green-500/20 border border-green-500 rounded-lg">
          <div class="text-sm text-green-400 mb-1">승자</div>
          <div class="font-bold text-lg">${hand.winner.player}</div>
          <div class="text-sm text-gray-400 mt-2">
            <div>획득: ${formatNumber(hand.winner.amount)}</div>
            ${hand.winner.hand ? `<div>핸드: ${hand.winner.hand}</div>` : ''}
          </div>
        </div>
      `;
    }
    
    function selectPlayer(playerName) {
      const container = document.getElementById('selected-player-info');
      
      // 현재 핸드 데이터에서 플레이어 찾기
      // TODO: 구현
      
      container.innerHTML = `
        <div class="space-y-3">
          <div class="font-semibold text-lg">${playerName}</div>
          <div class="text-sm text-gray-400">
            상세 정보를 로드 중...
          </div>
        </div>
      `;
    }
    
    // ====================================
    // 알림 함수
    // ====================================
    
    function showNotification(message) {
      if (!CONFIG.ENABLE_NOTIFICATIONS) return;
      
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('포커 핸드 모니터링', {
          body: message,
          icon: '/favicon.ico'
        });
      }
    }
    
    function playSound() {
      if (!CONFIG.ENABLE_SOUND) return;
      
      const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSl+zPDTgjMGHm7A7+OZURE');
      audio.play().catch(e => console.log('소리 재생 실패:', e));
    }
    
    // ====================================
    // 핸드 편집 상태 업데이트
    // ====================================
    
    async function updateHandEditStatus(handNumber, checked) {
      try {
        const formData = new FormData();
        formData.append('payload', JSON.stringify({
          action: 'updateHandEdit',
          handNumber: handNumber,
          checked: checked
        }));
        
        const response = await fetch(CONFIG.APPS_SCRIPT_URL, {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (result.status === 'success') {
          console.log('핸드 편집 상태 업데이트 성공:', result);
          await loadIndexData();
        } else {
          console.error('핸드 편집 상태 업데이트 실패:', result);
        }
      } catch (error) {
        console.error('API 오류:', error);
      }
    }
    
    // ====================================
    // 이벤트 리스너
    // ====================================
    
    document.getElementById('refresh-btn').addEventListener('click', () => {
      loadIndexData();
    });
    
    document.getElementById('settings-btn').addEventListener('click', () => {
      document.getElementById('settings-modal').classList.remove('hidden');
    });
    
    document.getElementById('cancel-settings').addEventListener('click', () => {
      document.getElementById('settings-modal').classList.add('hidden');
    });
    
    document.getElementById('save-settings').addEventListener('click', () => {
      CONFIG.REFRESH_INTERVAL = parseInt(document.getElementById('refresh-interval').value);
      CONFIG.ENABLE_NOTIFICATIONS = document.getElementById('enable-notifications').checked;
      CONFIG.ENABLE_SOUND = document.getElementById('enable-sound').checked;
      
      // 타이머 재시작
      if (refreshTimer) clearInterval(refreshTimer);
      refreshTimer = setInterval(loadIndexData, CONFIG.REFRESH_INTERVAL);
      
      document.getElementById('settings-modal').classList.add('hidden');
    });
    
    document.getElementById('table-filter').addEventListener('change', updateHandList);
    document.getElementById('status-filter').addEventListener('change', updateHandList);
    
    document.getElementById('edit-btn').addEventListener('click', () => {
      if (currentHand) {
        updateHandEditStatus(currentHand, false);
      }
    });
    
    document.getElementById('complete-btn').addEventListener('click', () => {
      if (currentHand) {
        updateHandEditStatus(currentHand, true);
      }
    });
    
    // ====================================
    // 초기화
    // ====================================
    
    async function init() {
      console.log('포커 핸드 모니터링 시스템 v7.0.0 시작');
      
      // 알림 권한 요청
      if ('Notification' in window && Notification.permission === 'default') {
        await Notification.requestPermission();
      }
      
      // 초기 데이터 로드
      await loadIndexData();
      
      // 첫 번째 핸드 자동 선택
      if (allHands.length > 0) {
        selectHand(allHands[0].handNumber);
      }
      
      // 자동 새로고침 시작
      refreshTimer = setInterval(loadIndexData, CONFIG.REFRESH_INTERVAL);
      
      console.log('초기화 완료');
    }
    
    // 앱 시작
    init();
  </script>
</body>
</html>